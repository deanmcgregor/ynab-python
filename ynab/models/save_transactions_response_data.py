# coding: utf-8

"""
    YNAB API Endpoints

    Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SaveTransactionsResponseData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'transaction_ids': 'list[str]',
        'transaction': 'TransactionDetail',
        'transactions': 'list[TransactionDetail]',
        'duplicate_import_ids': 'list[str]',
        'server_knowledge': 'int'
    }

    attribute_map = {
        'transaction_ids': 'transaction_ids',
        'transaction': 'transaction',
        'transactions': 'transactions',
        'duplicate_import_ids': 'duplicate_import_ids',
        'server_knowledge': 'server_knowledge'
    }

    def __init__(self, transaction_ids=None, transaction=None, transactions=None, duplicate_import_ids=None, server_knowledge=None):  # noqa: E501
        """SaveTransactionsResponseData - a model defined in Swagger"""  # noqa: E501
        self._transaction_ids = None
        self._transaction = None
        self._transactions = None
        self._duplicate_import_ids = None
        self._server_knowledge = None
        self.discriminator = None
        self.transaction_ids = transaction_ids
        if transaction is not None:
            self.transaction = transaction
        if transactions is not None:
            self.transactions = transactions
        if duplicate_import_ids is not None:
            self.duplicate_import_ids = duplicate_import_ids
        self.server_knowledge = server_knowledge

    @property
    def transaction_ids(self):
        """Gets the transaction_ids of this SaveTransactionsResponseData.  # noqa: E501

        The transaction ids that were saved  # noqa: E501

        :return: The transaction_ids of this SaveTransactionsResponseData.  # noqa: E501
        :rtype: list[str]
        """
        return self._transaction_ids

    @transaction_ids.setter
    def transaction_ids(self, transaction_ids):
        """Sets the transaction_ids of this SaveTransactionsResponseData.

        The transaction ids that were saved  # noqa: E501

        :param transaction_ids: The transaction_ids of this SaveTransactionsResponseData.  # noqa: E501
        :type: list[str]
        """
        if transaction_ids is None:
            raise ValueError("Invalid value for `transaction_ids`, must not be `None`")  # noqa: E501

        self._transaction_ids = transaction_ids

    @property
    def transaction(self):
        """Gets the transaction of this SaveTransactionsResponseData.  # noqa: E501


        :return: The transaction of this SaveTransactionsResponseData.  # noqa: E501
        :rtype: TransactionDetail
        """
        return self._transaction

    @transaction.setter
    def transaction(self, transaction):
        """Sets the transaction of this SaveTransactionsResponseData.


        :param transaction: The transaction of this SaveTransactionsResponseData.  # noqa: E501
        :type: TransactionDetail
        """

        self._transaction = transaction

    @property
    def transactions(self):
        """Gets the transactions of this SaveTransactionsResponseData.  # noqa: E501

        If multiple transactions were specified, the transactions that were saved  # noqa: E501

        :return: The transactions of this SaveTransactionsResponseData.  # noqa: E501
        :rtype: list[TransactionDetail]
        """
        return self._transactions

    @transactions.setter
    def transactions(self, transactions):
        """Sets the transactions of this SaveTransactionsResponseData.

        If multiple transactions were specified, the transactions that were saved  # noqa: E501

        :param transactions: The transactions of this SaveTransactionsResponseData.  # noqa: E501
        :type: list[TransactionDetail]
        """

        self._transactions = transactions

    @property
    def duplicate_import_ids(self):
        """Gets the duplicate_import_ids of this SaveTransactionsResponseData.  # noqa: E501

        If multiple transactions were specified, a list of import_ids that were not created because of an existing `import_id` found on the same account  # noqa: E501

        :return: The duplicate_import_ids of this SaveTransactionsResponseData.  # noqa: E501
        :rtype: list[str]
        """
        return self._duplicate_import_ids

    @duplicate_import_ids.setter
    def duplicate_import_ids(self, duplicate_import_ids):
        """Sets the duplicate_import_ids of this SaveTransactionsResponseData.

        If multiple transactions were specified, a list of import_ids that were not created because of an existing `import_id` found on the same account  # noqa: E501

        :param duplicate_import_ids: The duplicate_import_ids of this SaveTransactionsResponseData.  # noqa: E501
        :type: list[str]
        """

        self._duplicate_import_ids = duplicate_import_ids

    @property
    def server_knowledge(self):
        """Gets the server_knowledge of this SaveTransactionsResponseData.  # noqa: E501

        The knowledge of the server  # noqa: E501

        :return: The server_knowledge of this SaveTransactionsResponseData.  # noqa: E501
        :rtype: int
        """
        return self._server_knowledge

    @server_knowledge.setter
    def server_knowledge(self, server_knowledge):
        """Sets the server_knowledge of this SaveTransactionsResponseData.

        The knowledge of the server  # noqa: E501

        :param server_knowledge: The server_knowledge of this SaveTransactionsResponseData.  # noqa: E501
        :type: int
        """
        if server_knowledge is None:
            raise ValueError("Invalid value for `server_knowledge`, must not be `None`")  # noqa: E501

        self._server_knowledge = server_knowledge

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SaveTransactionsResponseData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SaveTransactionsResponseData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
